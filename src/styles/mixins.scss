//
//
// Mixins
// ---------------------------------------------------------
//
//  Theme mixins file
//
// -----------------------------------------------------

// A map of breakpoints.
$breakpoints: (
  xsm: 300px,
  sm: 600px,
  md: 768px,
  lg: 1024px,
  xlg: 1200px
);

// @include bp-up(sm) {}
@mixin bp-up($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    $breakpoint-value: map-get($breakpoints, $breakpoint);
    @media (min-width: $breakpoint-value) {
      @content;
    }
  } @else {
    @media (min-width: $breakpoint) {
      @content;
    }
  }
}

// @include bp-down(sm) {}
@mixin bp-down($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    $breakpoint-value: map-get($breakpoints, $breakpoint);
    @media (max-width: ($breakpoint-value - 1)) {
      @content;
    }
  } @else {
    @media (max-width: $breakpoint) {
      @content;
    }
  }
}

// @include bp-between(sm, md) {}
@mixin bp-between($lower, $upper) {
  @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {
    $lower-breakpoint: map-get($breakpoints, $lower);
    $upper-breakpoint: map-get($breakpoints, $upper);
    @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
      @content;
    }
  } @else {
    @if $lower == '' and $upper == '' {
      @content;
    } @else {
      @media (min-width: $lower) and (max-width: $upper) {
        @content;
      }
    }
  }
}

// fluid properties - scaling of properties
// @incude fp(font-size,12,35);
@mixin fp($property, $min, $max, $start: 320, $end: 1400, $clip: true, $clipAtStart: true, $clipAtEnd: true) {
  $multiplier: ($max - $min) / ($end - $start) * 100;
  $adder: ($min * $end - $max * $start) / ($end - $start);
  $formula: calc(#{$multiplier + 0vw} + #{$adder + 0px});
  @if $clip and $clipAtStart {
    @media (max-width: #{$start + 0px}) {
      #{$property}: $min + 0px;
    }
  }
  @if $clip and $clipAtEnd {
    @media (min-width: #{$end + 0px}) {
      #{$property}: $max + 0px;
    }
  }
  #{$property}: $formula;
}

// string replace - used in font face for svgs
@function str-replace($string, $search, $replace: "") {
	$index: str-index($string, $search);
	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}
	@return $string;
}

// font face - include external fonts
//@include font-face(GTAmericaMonoTrial-Regular, normal, normal, ttf woff woff2 eot otf);
@mixin font-face($name, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
  $src: null;
  $path: '../fonts/' + $name;
	$extmods: (
		eot: "?",
		svg: "#" + str-replace($name, " ", "_")
	);
	$formats: (
		otf: "opentype",
		ttf: "truetype"
	);
	@each $ext in $exts {
		$extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
		$format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
		$src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
	}
	@font-face {
		font-family: quote($name);
		font-style: $style;
		font-weight: $weight;
		src: $src;
	}
}

// simple mixin for absoulte setup
// @include content-absolute(true,left,top);
@mixin content-absolute($pseudo, $x, $y) {
  @if($pseudo == true) {
    content: '';
  }
  position: absolute;
  width: 100%;
  height: 100%;
  #{$x}: 0;
  #{$y}: 0;
}